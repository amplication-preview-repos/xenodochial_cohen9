/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { DietFindManyArgs } from "../../diet/base/DietFindManyArgs";
import { Diet } from "../../diet/base/Diet";
import { DietWhereUniqueInput } from "../../diet/base/DietWhereUniqueInput";
import { ProgressFindManyArgs } from "../../progress/base/ProgressFindManyArgs";
import { Progress } from "../../progress/base/Progress";
import { ProgressWhereUniqueInput } from "../../progress/base/ProgressWhereUniqueInput";
import { WorkoutFindManyArgs } from "../../workout/base/WorkoutFindManyArgs";
import { Workout } from "../../workout/base/Workout";
import { WorkoutWhereUniqueInput } from "../../workout/base/WorkoutWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/diets")
  @ApiNestedQuery(DietFindManyArgs)
  async findDiets(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Diet[]> {
    const query = plainToClass(DietFindManyArgs, request.query);
    const results = await this.service.findDiets(params.id, {
      ...query,
      select: {
        calories: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/diets")
  async connectDiets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DietWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      diets: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/diets")
  async updateDiets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DietWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      diets: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/diets")
  async disconnectDiets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DietWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      diets: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/progresses")
  @ApiNestedQuery(ProgressFindManyArgs)
  async findProgresses(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Progress[]> {
    const query = plainToClass(ProgressFindManyArgs, request.query);
    const results = await this.service.findProgresses(params.id, {
      ...query,
      select: {
        bodyFat: true,
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        weight: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/progresses")
  async connectProgresses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/progresses")
  async updateProgresses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/progresses")
  async disconnectProgresses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/workouts")
  @ApiNestedQuery(WorkoutFindManyArgs)
  async findWorkouts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Workout[]> {
    const query = plainToClass(WorkoutFindManyArgs, request.query);
    const results = await this.service.findWorkouts(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        duration: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workouts")
  async connectWorkouts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WorkoutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workouts: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workouts")
  async updateWorkouts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WorkoutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workouts: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workouts")
  async disconnectWorkouts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WorkoutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workouts: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
